[
  {
    "objectID": "posts/HockeyData/index.html",
    "href": "posts/HockeyData/index.html",
    "title": "ASSIGNMENT 5",
    "section": "",
    "text": "In this assignment, we are going to practice creating visualizations for tabular data. Unlike previous assignments, however, this time we will all be using the same data sets. I’m doing this because I want everyone to engage in the same logic process and have the same design objectives in mind.\nVancouver receives: The 7th pick in the second round (39th overall), the 10th pick in the second round (42nd overall), and the 10th pick in the third round (74th overall).\nDetroit receives: The 1st pick in the first round (1st overall).\nDoofenschmirtz reasons that more draft picks are better, and is inclined to make the trade. Cassandra isn’t so sure…\nShe asks you to create some data visualizations she can show to her boss that might help him make the best decision.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.1 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readxl)\n\nNHLDraft<-read.csv(\"NHLDraft.csv\")\nNHLDictionary<-read_excel(\"NHLDictionary.xlsx\")\nglimpse(NHLDraft)\n\n\nRows: 105,936\nColumns: 12\n$ X           <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…\n$ draftyear   <int> 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001…\n$ name        <chr> \"Drew Fata\", \"Drew Fata\", \"Drew Fata\", \"Drew Fata\", \"Drew …\n$ round       <int> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n$ overall     <int> 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86…\n$ pickinRound <int> 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23…\n$ height      <int> 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73…\n$ weight      <int> 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209…\n$ position    <chr> \"Defense\", \"Defense\", \"Defense\", \"Defense\", \"Defense\", \"De…\n$ playerId    <int> 8469535, 8469535, 8469535, 8469535, 8469535, 8469535, 8469…\n$ postdraft   <int> 0, 1, 2, 4, 5, 10, 11, 12, 13, 3, 6, 7, 8, 9, 14, 15, 16, …\n$ NHLgames    <int> 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nCode\nknitr::kable(NHLDictionary)\n\n\n\n\n\n\n\n\n\n\nAttribute\nType\nDescription\n\n\n\n\ndraftyear\nOrdinal\nCalendar year in which the player was drafted into the NHL.\n\n\nname\nItem\nFull name of the player.\n\n\nround\nOrdinal\nRound in which the player was drafted (1 to 7).\n\n\noverall\nOrdinal\nOverall draft position of the player (1 to 224)\n\n\npickinRound\nOrdinal\nPosition in which the player was drafted in their round (1 to 32).\n\n\nheight\nQuantitative\nPlayer height in inches.\n\n\nweight\nQuantitative\nPlayer weight in pounds.\n\n\nposition\nCategorical\nPlayer position (Forward, Defense, Goaltender)\n\n\nplayerId\nItem\nUnique ID (key) assigned to each player.\n\n\npostdraft\nOrdinal\nNumber of seasons since being drafted (0 to 20).\n\n\nNHLgames\nQuantitative\nNumber of games played in the NHL in that particular season (regular season is 82 games, playoffs are up to 28 more).\n\n\n\n\n\nIn this case, we have a dataframe with all the drafted players since 2000, their position, their draft year and position, and then rows for each season since being drafted (postdraft). The key variable here is NHLgames, which tells us how many games they played in the NHL each season since being drafted."
  },
  {
    "objectID": "posts/HockeyData/index.html#simple-scatterplot",
    "href": "posts/HockeyData/index.html#simple-scatterplot",
    "title": "ASSIGNMENT 5",
    "section": "SIMPLE SCATTERPLOT",
    "text": "SIMPLE SCATTERPLOT\nOne thing to realize about professional hockey is that it is pretty rare for a player to play in the NHL right after being drafted. Players get drafted when they are 18 years old, and they usually play in the juniors, minor leagues, or the NCAA for a bit to further develop. Let’s use a scatterplot to visualize this phenomenon with the most recent draft classes.\n\n\nCode\ndraft2022<-NHLDraft%>%\n  filter(draftyear==2022 & postdraft==0)\n\nggplot(draft2022, aes(x=round, y=NHLgames))+\n  geom_point()\n\n\n\n\n\n\n\nCode\ndraft2022<-NHLDraft%>%\n  filter(draftyear==2022 & postdraft==0)\n\nggplot(draft2022, aes(x=round, y=NHLgames,))+\n  geom_boxplot(aes(group = round))+\n  labs(title=\"Games Played vs. Draft Round\",x=\"Draft Round\", y = \"Games Played\")+\n  labs(caption = \"As you can see not many players drafted after round one play in their first season utilizing points, lines (bars not visible), and spatial position.\")+\n  theme(plot.caption = element_text(hjust=.5))"
  },
  {
    "objectID": "posts/HockeyData/index.html#changed-visualization",
    "href": "posts/HockeyData/index.html#changed-visualization",
    "title": "ASSIGNMENT 5",
    "section": "Changed Visualization",
    "text": "Changed Visualization\nI decided a boxplot graphic might better help to visualize the trend of flatlining after draft round 1. While I do think it does this, it also doesn’t fix the overplotting problem very well in this visualization. Axis labels, title, and caption were added to assist the coach in understanding the chart."
  },
  {
    "objectID": "posts/HockeyData/index.html#expanded-scatterplot",
    "href": "posts/HockeyData/index.html#expanded-scatterplot",
    "title": "ASSIGNMENT 5",
    "section": "EXPANDED SCATTERPLOT",
    "text": "EXPANDED SCATTERPLOT\nThe data from the most recent draft isn’t really helpful for our question. Let’s go back in time and use a draft year that has had some time to develop and reach their potential. How about 2018?\n\n\nCode\ndraft2018<-NHLDraft%>%\n  filter(draftyear==2018 & postdraft<6)\n\nggplot(draft2018, aes(x=round, y=NHLgames))+\n  geom_point()\n\n\n\n\n\nHmmm… in addition to the problem of overplotting, we’ve got an additional issue here. We actually have two keys and one attribute. The attribute is NHLgames, and the keys are round and postdraft, but we are only using round.\nPostdraft indicates the number of seasons after being drafted. We have several choices here. We can make a visualization that uses both keys, or we can somehow summarize the data for one of the keys.\nFor example, let’s say we just wanted to know the TOTAL number of NHL games played since being drafted.\n\n\nCode\ndrafttot2018<- draft2018%>%\n  group_by(playerId, round, overall, position, name)%>%\n  summarise(totgames=sum(NHLgames))\n\n\n`summarise()` has grouped output by 'playerId', 'round', 'overall', 'position'.\nYou can override using the `.groups` argument.\n\n\nCode\nggplot(drafttot2018, aes(x=round, y=totgames))+\n  geom_point()\n\n\n\n\n\n\n\nCode\ndrafttot2018<- draft2018%>%\n  group_by(playerId, round, overall, position, name)%>%\n  summarise(totgames=sum(NHLgames))\n\n\n`summarise()` has grouped output by 'playerId', 'round', 'overall', 'position'.\nYou can override using the `.groups` argument.\n\n\nCode\nggplot(drafttot2018, aes(x=round, y=totgames,))+\n  geom_boxplot(aes(group = round))+\n  labs(title=\"Games Played vs. Draft Round\",x=\"Draft Round\", y = \"Games Played\")+\n  labs(caption = \"A visualization demonatrating the distribution of how useful a player is based on which round they are drafted in.\")+\n  theme(plot.caption = element_text(hjust=.5))"
  },
  {
    "objectID": "posts/HockeyData/index.html#plot-fix",
    "href": "posts/HockeyData/index.html#plot-fix",
    "title": "ASSIGNMENT 5",
    "section": "Plot Fix",
    "text": "Plot Fix\nFor the expanded scatterplot a boxplot seems to work better. It adds the addition of line length as a channel which (in my opinion), assists in visualizing what is going on with the overplotting. As well as that I think the large box in round one shrinking quickly by round 3 is a heavy indicator that round 1 is the most important by far. Axis labels, title, and caption added to assist."
  },
  {
    "objectID": "posts/HockeyData/index.html#scatterplot-with-overall-draft-position",
    "href": "posts/HockeyData/index.html#scatterplot-with-overall-draft-position",
    "title": "ASSIGNMENT 5",
    "section": "SCATTERPLOT WITH OVERALL DRAFT POSITION",
    "text": "SCATTERPLOT WITH OVERALL DRAFT POSITION\nThis approach might yield a better match with the scatterplot idiom. What if we ignore draft round, and use the player’s overall draft position instead?\n\n\nCode\nggplot(drafttot2018, aes(x=overall, y=totgames))+\n  geom_point()\n\n\n\n\n\n\n\nCode\nggplot(drafttot2018, aes(x=overall, y=totgames))+\n  geom_line(color= \"red\")+\n  geom_point()+\n  labs(title=\"Games Played vs. Draft Round\",x=\"Overall Pick\", y = \"Games Played\")+\n  labs(caption = \"The trend of overall NHL draft picks plotted against how many games they played, the lineplot supposedly helps show a downward trend from top draft picks to middle draft picks.\")+\n  theme(plot.caption = element_text(hjust=.5))"
  },
  {
    "objectID": "posts/HockeyData/index.html#attempted-fix",
    "href": "posts/HockeyData/index.html#attempted-fix",
    "title": "ASSIGNMENT 5",
    "section": "Attempted Fix",
    "text": "Attempted Fix\nAs the title says it was an attempt, I honestly don’t know if it makes the visualization better but I changed the scatterplot to a line plot in order to connect the dots on all of those and show the general trend downwards with a scary red line. However, those outliers seem to make it look less scary than i intended and I couldn’t get a standard deviation cloud around the line to work or anything due to not really knowing ggplot."
  },
  {
    "objectID": "posts/HockeyData/index.html#scatterplot-summary",
    "href": "posts/HockeyData/index.html#scatterplot-summary",
    "title": "ASSIGNMENT 5",
    "section": "SCATTERPLOT SUMMARY",
    "text": "SCATTERPLOT SUMMARY\nWe seem to be running into an issue in terms of overplotting. Scatterplots are great, but they work best for two quantitative attributes, and we have a situation with one or two keys and one quantitative attribute. The thing is, scatterplots can be very useful when part of our workflow involves modeling the data in some way. We’ll cover this kind of thing in future assignments, but just a bit of foreshadowing here:\n\n\nCode\nggplot(drafttot2018, aes(x=round, y=totgames))+\n  geom_point()+\n  geom_smooth()\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nAdding the smoothed line doesn’t eliminate the overplotting problem, but it does indicate that it exists. We’ll cover other potential solutions (including Cody’s violin plots!) to this issue later in the course, when we get to the notions of faceting and data reduction."
  },
  {
    "objectID": "posts/HockeyData/index.html#simple-bar-chart",
    "href": "posts/HockeyData/index.html#simple-bar-chart",
    "title": "ASSIGNMENT 5",
    "section": "SIMPLE BAR CHART",
    "text": "SIMPLE BAR CHART\nOne of the best ways to deal with overplotting is to use our keys to SEPARATE and ORDER our data. Let’s do that now. I’ll stick with the summarized data for the 2018 draft year for now.\n\n\nCode\nggplot(drafttot2018, aes(x = name, y=totgames))+\n  geom_col()\n\n\n\n\n\n\n\nCode\nggplot(drafttot2018, aes(x = round, y=totgames, fill = name))+\n  geom_col()+\n  theme(legend.position = \"none\")+\n  labs(title=\"Games Played vs. Draft Round\",x=\"Draft Round\", y = \"Games Played\")+\n  labs(caption = \"Amount of games played total vs draft round for 2018. Color indicates individual players to help with overplotting\")+\n  theme(plot.caption = element_text(hjust=.5))"
  },
  {
    "objectID": "posts/HockeyData/index.html#pseudo-stacked-bar",
    "href": "posts/HockeyData/index.html#pseudo-stacked-bar",
    "title": "ASSIGNMENT 5",
    "section": "Pseudo Stacked Bar?",
    "text": "Pseudo Stacked Bar?\nI basically just changed the bar graph x axis to draft round and then made the player name a channel in the bar graph to show individuals better and assist with overplotting. It’s kinda similar to the stacked bar you did but with different channels representing different things. I also got rid of the legend because it made it unreadable with color indicating player name the legend was larger than the graph.\n\n\nCode\nggplot(NHLDraft, aes(x = overall, y=NHLgames))+\n  geom_smooth()+\n  theme(legend.position = \"none\")+\n  labs(title=\"Games Played vs. Draft Round\",x=\"Draft Round\", y = \"Games Played\")+\n  labs(caption = \"Amount of games played for the 2022 draft pool\")+\n  theme(plot.caption = element_text(hjust=.5))\n\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'"
  },
  {
    "objectID": "posts/HockeyData/index.html#line-graph",
    "href": "posts/HockeyData/index.html#line-graph",
    "title": "ASSIGNMENT 5",
    "section": "Line graph",
    "text": "Line graph\nI Think a smooth line graph with error cloud shows at a different angle what I’m trying to explain but still doesn’t really get the full picture across at total games for all the players.\n\n\nCode\nggplot(NHLDraft, aes(x = postdraft, y=NHLgames, fill=(as.factor(round))))+\n  geom_col(position = \"stack\")+\n  labs(color = \"Legend\")+\n  labs(fill = \"Draft Round\")+\n  labs(caption = \"NHL games years post draft total by round picked\")+\n  theme(plot.caption = element_text(hjust=.5))"
  },
  {
    "objectID": "posts/HockeyData/index.html#overlapping-bar",
    "href": "posts/HockeyData/index.html#overlapping-bar",
    "title": "ASSIGNMENT 5",
    "section": "Overlapping Bar",
    "text": "Overlapping Bar\nI think this graph lays it out in a visually pleasing way as well as getting the message across. There are issues like the round one being in the back when you want the most important to the front. But I do think to a non data scientist seeing this they could pretty easily see that round 1 players are superior to all the other draft picks combined for each year which is valuable."
  },
  {
    "objectID": "posts/HockeyData/index.html#pie-charts-normalized-bar-charts",
    "href": "posts/HockeyData/index.html#pie-charts-normalized-bar-charts",
    "title": "ASSIGNMENT 5",
    "section": "PIE CHARTS / NORMALIZED BAR CHARTS",
    "text": "PIE CHARTS / NORMALIZED BAR CHARTS\nWe all know that Pie Charts are rarely a good choice, but let’s look at how to make one here. I’ll eliminate all the players drafted in 2018 who never played an NHL game, leaving us 80 players drafted in that year who made “THE SHOW”. Let’s look at how those 80 players were drafted:\n\n\nCode\nplayedNHL2018 <- drafttot2018%>%\n  filter(totgames>0)\n\nggplot(playedNHL2018, aes(x = \"\", fill = factor(round))) +\n  geom_bar(width = 1) +\n  coord_polar(theta = \"y\")\n\n\n\n\n\nObviously this isn’t great, but can you state why? Write a little critique of this visualizaiton that:\n\nConsiders a player who played hundreds of games over their first five years vs a player who played one game in five years.\nEvaluates the relative value of a second round pick and a third round pick."
  },
  {
    "objectID": "posts/HockeyData/index.html#critique",
    "href": "posts/HockeyData/index.html#critique",
    "title": "ASSIGNMENT 5",
    "section": "Critique:",
    "text": "Critique:\nThe Pie chart is basically just losing information, in regards to the first question it is basically just showing the relative proportion of players that just played a game. It doesn’t take into account first round picks that played hundreds vs a third round pick who played 1 game, or even a first round pick who played one game then hurt themselves. It could be a better figure if instead of counting the 80 players who played a game, it was counting the amount of games played by each round picks. This graph skews it to make it seem like if you took a second and a third round pick it would equal a first round pick. Which isn’t the case on other figures.\nNow let’s change this to account for the various years post draft:\n\n\nCode\nseasonplayedNHL2018 <- draft2018%>%\n  filter(NHLgames>0)\n\n\nggplot(seasonplayedNHL2018, aes(x = \"\", fill = factor(round))) +\n  geom_bar(width = 1) +\n  coord_polar(theta = \"y\")+\n  facet_wrap(~postdraft)\n\n\n\n\n\nSeems like there is something to work with here, but let’s compare this to a normalized bar chart:\n\n\nCode\nggplot(draft2018, aes(x = postdraft, y=NHLgames, fill=as.factor(round)))+\n  geom_col(position = \"fill\")\n\n\nWarning: Removed 218 rows containing missing values (`geom_col()`).\n\n\n\n\n\nCan you work with this to make it a useful visualization for your friend, Cassandra Canuck?"
  },
  {
    "objectID": "posts/HockeyData/index.html#heatmap",
    "href": "posts/HockeyData/index.html#heatmap",
    "title": "ASSIGNMENT 5",
    "section": "HEATMAP?",
    "text": "HEATMAP?\nCould this be useful?\n\n\nCode\nround1<-NHLDraft%>%\n  filter(round==1)\n\nggplot(round1, aes(y = reorder(name, overall), x = postdraft, fill = NHLgames)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"blue\", high = \"red\")"
  },
  {
    "objectID": "posts/HockeyData/index.html#other-stuff-to-consider",
    "href": "posts/HockeyData/index.html#other-stuff-to-consider",
    "title": "ASSIGNMENT 5",
    "section": "OTHER STUFF TO CONSIDER",
    "text": "OTHER STUFF TO CONSIDER\n\nDo these visualizations change as a function of player position?\nIs the number of NHL games played really the best metric to use?"
  },
  {
    "objectID": "posts/HockeyData/index.html#conclusion",
    "href": "posts/HockeyData/index.html#conclusion",
    "title": "ASSIGNMENT 5",
    "section": "CONCLUSION",
    "text": "CONCLUSION\nBased on your visualizations, what would you advise regarding this trade proposal? Why?"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Assignment 3",
    "section": "",
    "text": "Using digital droplet PCR data we were able to quantify the ratio of the chromosomal origin and terminus of chlamydia on a population level. Using this data we can determine whether a population is actively in the cell cycle or not.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport numpy as np; np.random.seed(22)\nimport seaborn as sns; sns.set(color_codes=True)\nimport pandas as pd\n\nimport math\n\n\n\n\nCode\ndatadir = '/Users/codyappa/Documents/BCB504/BCB504Portfolio/posts/post-with-code/Sheet 2-Table 1.csv'\n\n\n\n\nCode\ndf = pd.read_csv('Sheet 2-Table 1.csv')\n\n\n\n\nThe data used here is counts from around 20k individual PCR reactions per time point isolated in lipid droplets. We then use probes that are specific to individual chromosomal regions within the origin or terminus to determine the number of each. Actively replicating chromosomes start a replication fork at the origin leading to a 2:1 origin to terminus ratio. Non-replicating chromosomes only have one origin.\n\n\nCode\ndf\n\n\n\n\n\n\n  \n    \n      \n      Hpi\n      Treatment\n      PyrG raw\n      NqrA raw\n      Ratio\n      Dilution\n      pyrG copies/ul\n      nqrA copies/ul\n    \n  \n  \n    \n      0\n      18\n      Unt\n      76.9\n      140.0\n      1.820546\n      150\n      11535\n      21000\n    \n    \n      1\n      18\n      Unt\n      17.9\n      30.7\n      1.715084\n      600\n      10740\n      18420\n    \n    \n      2\n      18\n      Unt\n      77.6\n      141.0\n      1.817010\n      150\n      11640\n      21150\n    \n    \n      3\n      18\n      Unt\n      20.3\n      39.2\n      1.931034\n      600\n      12180\n      23520\n    \n    \n      4\n      18\n      Unt\n      91.9\n      166.0\n      1.806311\n      150\n      13785\n      24900\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      103\n      48\n      Wsh\n      67.2\n      71.9\n      1.069940\n      6400\n      430080\n      460160\n    \n    \n      104\n      48\n      Wsh\n      210.0\n      251.0\n      1.195238\n      1600\n      336000\n      401600\n    \n    \n      105\n      48\n      Wsh\n      50.8\n      61.8\n      1.216535\n      6400\n      325120\n      395520\n    \n    \n      106\n      48\n      Wsh\n      268.0\n      326.0\n      1.216418\n      1600\n      428800\n      521600\n    \n    \n      107\n      48\n      Wsh\n      59.1\n      70.1\n      1.186125\n      6400\n      378240\n      448640\n    \n  \n\n108 rows × 8 columns\n\n\n\n\n\nCode\ndf.describe()\n\n\n\n\n\n\n  \n    \n      \n      Hpi\n      PyrG raw\n      NqrA raw\n      Ratio\n      Dilution\n      pyrG copies/ul\n      nqrA copies/ul\n    \n  \n  \n    \n      count\n      108.000000\n      108.000000\n      108.000000\n      108.000000\n      108.000000\n      108.000000\n      1.080000e+02\n    \n    \n      mean\n      35.333333\n      225.462963\n      295.671296\n      1.344637\n      1729.166667\n      237534.120370\n      2.984672e+05\n    \n    \n      std\n      9.400736\n      199.513261\n      267.843689\n      0.221217\n      1721.227081\n      144646.196824\n      1.797389e+05\n    \n    \n      min\n      18.000000\n      17.900000\n      30.700000\n      1.069940\n      150.000000\n      10740.000000\n      1.842000e+04\n    \n    \n      25%\n      32.000000\n      83.825000\n      107.250000\n      1.200338\n      550.000000\n      165720.000000\n      2.074000e+05\n    \n    \n      50%\n      36.000000\n      146.500000\n      199.500000\n      1.242610\n      1200.000000\n      253560.000000\n      3.182400e+05\n    \n    \n      75%\n      42.000000\n      352.500000\n      435.250000\n      1.395836\n      2000.000000\n      308400.000000\n      4.013600e+05\n    \n    \n      max\n      48.000000\n      846.000000\n      1126.000000\n      1.961538\n      6400.000000\n      889600.000000\n      1.152000e+06\n    \n  \n\n\n\n\n\n\nCode\nAttributes = pd.read_csv('Assignment2_description.csv')\n\n\n\n\nCode\nAttributes\n\n\n\n\n\n\n  \n    \n      \n      Attribute\n      Type\n      Description\n    \n  \n  \n    \n      0\n      Hpi\n      Categorical\n      Hours post infection\n    \n    \n      1\n      Treatment\n      Categorical\n      Whether sample was untreated, induced for Euo,...\n    \n    \n      2\n      PyrG raw\n      Quantitative\n      PyrG+ means the PCR was positive for the termi...\n    \n    \n      3\n      NqrA raw\n      Quantitative\n      NqrA+ means the PCR was positive for the origi...\n    \n    \n      4\n      Ratio\n      Quantitative\n      The ratio of Origins/Termini\n    \n    \n      5\n      Dilution\n      Categorical\n      Dilution of the wells prior to readout\n    \n    \n      6\n      PyrG copies/ul\n      Quantitative\n      PyrG numbers adjusted for dilution factor\n    \n    \n      7\n      NqrA copies/ul\n      Quantitative\n      Nqra numbers adjusted for dilution factor\n    \n  \n\n\n\n\n\n\n\nIn order to properly visualize the ratios of three different treatments: Untreated, Induced, and Washout samples, I decided to use a violin plot. The violin plot allows for accurate visualization of ratios similar to a box and whisker plot, we then spaced out the individual treatments so that they would not overlap and cover each other.\n\n\nCode\nwith plt.style.context('seaborn-white'):\n    fig, ax = plt.subplots(ncols=1)\n    sns.violinplot(x=df['Hpi'], y=df['Ratio'], hue=df['Treatment'], data=df, ax=ax, dodge =\"True\", boxprops=dict(alpha=1),linewidth=.9, scale=\"width\", showmeans=True)\nwith plt.style.context('classic'):\n    ax.legend(loc='upper right', fontsize=10)\n    ax.ticklabel_format( axis=\"y\", style=\"sci\", scilimits=(0,2))\nfig.set_size_inches(4, 4)\n#ax.set_yscale('symlog', linthreshy=200)\n\n\n\n\n\n\n\n\nMy hypothesis for this experiment was that the untreated, induced, and washout samples would all follow a similar trend as induction did not affect accumulation of non dividing cells. There are multiple action-target pairs that we can draw from this graph.\n\nWe wanted to identify features by Identifying the Ratios per biological replicate\nAfter identifying the ratios we then wanted to Summarize the Trends\nafter summarizing the trends we could then Compare Similarity overtime, Discover Trends in the different treatments, and Derive Correlation between treatment and trends.\nThe most important action target pair, however is that we Enjoyed the Features!\n\n\n\nCode\nplt.show()"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This blog is my portfolio for BCB504 and my first attempt at conquering the world of data visualization.\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/MidtermPortfolio/MidtermPortfolio.html",
    "href": "posts/MidtermPortfolio/MidtermPortfolio.html",
    "title": "Midterm Portfolio",
    "section": "",
    "text": "This project takes the top 10 dps from the game World of Warcraft from the online log database for every boss fight in the raid. I then classified the bosses by whether they were AOE, Single target, or a mix. This projects goal is to analyze all of the classes in the game by the top 10 of every fight and determine which specs are good at what in the game.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.1 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readxl)\n\nDPSsheet<-read.csv(\"DataVizMidterm - Sheet1.csv\")\n\n\n\n\nCode\nlibrary(scales)\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nCode\nggplot(DPSsheet, aes(x=Class, y=DPS)) +\n  geom_point() +\n  labs(title = \"Top DPS by class\", caption = \"Overall dps for the top 10 of every boss in the raid\") +\n  theme(plot.caption = element_text(hjust = .5)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scientific_format())"
  },
  {
    "objectID": "posts/MidtermPortfolio/MidtermPortfolio.html#point-plot",
    "href": "posts/MidtermPortfolio/MidtermPortfolio.html#point-plot",
    "title": "Midterm Portfolio",
    "section": "Point plot",
    "text": "Point plot\nA point plot shows the general gist of what’s going on if I just graph them overall. You can get an idea that most specs are pretty balanced but there are some outliers here for specific events. You can’t really determine much from here because all of the bossfights are combined.\n\n\nCode\nDPSsheet$Class <- factor(DPSsheet$Class)\n\nggplot(DPSsheet, aes(x=Boss, y=DPS, color = Class)) +\n  geom_point()+\n  labs(title = \"Top DPS by class per Boss\", caption = \"Overall dps for the top 10 of every boss in the raid\") +\n  theme(plot.caption = element_text(hjust = .5)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scientific_format())+\n  scale_color_manual(values = c(\"red\", \"#B01AAB\", \"orange\", \"#219864\", \"green\", \"#51CDCD\", \"#51CD92\", \"grey\", \"yellow\", \"blue\", \"purple\", \"brown\"), drop = FALSE)"
  },
  {
    "objectID": "posts/MidtermPortfolio/MidtermPortfolio.html#different-plotting",
    "href": "posts/MidtermPortfolio/MidtermPortfolio.html#different-plotting",
    "title": "Midterm Portfolio",
    "section": "Different Plotting",
    "text": "Different Plotting\nI tried adding color and specifying by the bossfight in order to show which dps was best per boss. It gets the message across better as to who is doing well and shoes outliers such as druid on primal council but there still is a lot of overlap here.\n\n\nCode\nggplot(DPSsheet, aes(x = Class, y=DPS, fill = Boss))+\n  geom_col(position = \"stack\")+\n  labs(title = \"Top DPS by Class\", caption = \"How each DPS stacks up with eachother...excuse my pun\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  theme(plot.caption = element_text(hjust = .5))"
  },
  {
    "objectID": "posts/MidtermPortfolio/MidtermPortfolio.html#stacked-bar",
    "href": "posts/MidtermPortfolio/MidtermPortfolio.html#stacked-bar",
    "title": "Midterm Portfolio",
    "section": "Stacked Bar",
    "text": "Stacked Bar\nIt’s easy to see in this situation that there are classes that are far better as a whole than others and you can begin to see a bit more of a division in the class balance when it comes to say, evokers versus shaman.\n\n\nCode\nggplot(DPSsheet, aes(x=Fight.Type, y=DPS, fill = Class)) +\n  geom_violin()+\n  labs(title = \"Top DPS by class per Fight Type\", caption = \"Which dps is best based on the encounter type\") +\n  theme(plot.caption = element_text(hjust = .5)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scientific_format())+\n  scale_fill_manual(values = c(\"red\", \"#B01AAB\", \"orange\", \"#219864\", \"green\", \"#51CDCD\", \"#51CD92\", \"grey\", \"yellow\", \"blue\", \"purple\", \"brown\"), drop = FALSE)\n\n\nWarning: Groups with fewer than two data points have been dropped.\nGroups with fewer than two data points have been dropped.\nGroups with fewer than two data points have been dropped.\nGroups with fewer than two data points have been dropped.\nGroups with fewer than two data points have been dropped.\nGroups with fewer than two data points have been dropped."
  },
  {
    "objectID": "posts/MidtermPortfolio/MidtermPortfolio.html#violins-away",
    "href": "posts/MidtermPortfolio/MidtermPortfolio.html#violins-away",
    "title": "Midterm Portfolio",
    "section": "Violins Away",
    "text": "Violins Away\nI wanted to show the discrepency of AOE versus single target here and show that some classes dominated but a violin plot might not be the play here.\n\n\nCode\nggplot(DPSsheet, aes(x=Fight.Type, y=DPS, color = Class)) +\n  geom_point()+\n  labs(title = \"Top DPS by class per Fight Type\", caption = \"Which classes are best based on the encounter type\") +\n  theme(plot.caption = element_text(hjust = .5)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scientific_format())+\n  scale_color_manual(values = c(\"red\", \"#B01AAB\", \"orange\", \"#219864\", \"green\", \"#51CDCD\", \"#51CD92\", \"grey\", \"yellow\", \"blue\", \"purple\", \"brown\"), drop = FALSE)"
  },
  {
    "objectID": "posts/MidtermPortfolio/MidtermPortfolio.html#tried-and-true",
    "href": "posts/MidtermPortfolio/MidtermPortfolio.html#tried-and-true",
    "title": "Midterm Portfolio",
    "section": "Tried and True",
    "text": "Tried and True\nI think the pointplot is really getting to the…point…about which classes are really good at aoe and single target. it shows there is a vast discrepency in AOE classes but when it comes to single target they are generally similar.\n\n\nCode\nggplot(DPSsheet, aes(x=Fight.Type, y=Rank, fill = Class)) +\n  geom_col()+\n  labs(title = \"Rankings Per Fight Type\", caption = \"DPS rankings per boss fight type\") +\n  theme(plot.caption = element_text(hjust = .5)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_fill_manual(values = c(\"red\", \"#B01AAB\", \"orange\", \"#219864\", \"green\", \"#51CDCD\", \"#51CD92\", \"grey\", \"yellow\", \"blue\", \"purple\", \"brown\"), drop = FALSE)"
  },
  {
    "objectID": "posts/MidtermPortfolio/MidtermPortfolio.html#stacked-bar-for-rank",
    "href": "posts/MidtermPortfolio/MidtermPortfolio.html#stacked-bar-for-rank",
    "title": "Midterm Portfolio",
    "section": "Stacked Bar for rank",
    "text": "Stacked Bar for rank\nThis might show it the best for which classes have the best time in which areas. You can clearly see hunters in the lead in both single target and aoe which is why they are a large outlier. As well as mages being good at single target and mixed fights. Druid may be an outlier in AOE situations but have zero single target which is why they aren’t as imbalanced.\n\n\nCode\nggplot(DPSsheet, aes(x=Class, y=Rank, fill = Fight.Type)) +\n  geom_col()+\n  labs(title = \"Which DPS is Best in Each Situation\", caption = \"Ranking density per fight type\") +\n  theme(plot.caption = element_text(hjust = .5)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_fill_manual(values = c(\"red\", \"#B01AAB\", \"orange\", \"#219864\", \"green\", \"#51CDCD\", \"#51CD92\", \"grey\", \"yellow\", \"blue\", \"purple\", \"brown\"), drop = FALSE)"
  },
  {
    "objectID": "posts/MarksChannels/index.html",
    "href": "posts/MarksChannels/index.html",
    "title": "Assignment 4",
    "section": "",
    "text": "Code\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport numpy as np; np.random.seed(22)\nimport seaborn as sns; sns.set(color_codes=True)\nimport pandas as pd\nimport math"
  },
  {
    "objectID": "posts/MarksChannels/index.html#figure-1",
    "href": "posts/MarksChannels/index.html#figure-1",
    "title": "Assignment 4",
    "section": "Figure 1",
    "text": "Figure 1\nThe following figure shows chromosomal counts of untreated and induced samples of Euo. By using these counts we can determine that the overall replication rate of the two treatments is the same."
  },
  {
    "objectID": "posts/MarksChannels/index.html#markschannels",
    "href": "posts/MarksChannels/index.html#markschannels",
    "title": "Assignment 4",
    "section": "Marks/Channels",
    "text": "Marks/Channels\nI used points to show the individual timepoints and then lines to connect them and show the correlation between the two. I then used differing colors to indicate the different datasets. Length of the errorbar is to show diversion from the mean.\n\n\nCode\nwith plt.style.context('seaborn-white'):\n    fig, ax = plt.subplots(ncols=1)\n    sns.pointplot(x=df['hpi'], y=df['pyrG copies/ul'], hue=df['Treatment'], data=df, errwidth=2, capsize=.1, linestyles='-', palette=('orange', 'b'), dodge=True, ax=ax)\n    with plt.style.context('classic'):\n        ax.legend(loc='upper left', fontsize=10)\n        ax.set(ylabel='Cell Count')\nax.ticklabel_format(axis=\"y\", style=\"sci\", scilimits=(0,2))\nfig.set_size_inches(4, 4)\n\n\n\n\n\n\n\nCode\nplt.show()"
  },
  {
    "objectID": "posts/MarksChannels/index.html#figure-2-markschannels",
    "href": "posts/MarksChannels/index.html#figure-2-markschannels",
    "title": "Assignment 4",
    "section": "Figure 2 Marks/Channels",
    "text": "Figure 2 Marks/Channels\nI made a heat map of the datasets which really doesn’t show the correlation or anything. You can see that as we get towards 48hpi they seem to follow the same ish pattern but really you can’t get any correlations from this.\n\nExpressive/Effective: the data presented is not shown in a way easily perceivable. Just by looking at the data you can’t really interpret anything unless I were to describe in detail what is occuring. There is too much overlap and many channels thrown at you; what does the color intensity mean? why is there a gap in the middle? what does orange vs blue mean?\nSeparability: the first dataset was easily separated by color and connecting lines. The second dataset, however, has a lot of overlap which makes it hard to be able to distinguish individual datapoints or any correlation as you look at it. you can just kinda see the colors vaguely mash together in the same areas.\n\n\n\nCode\nwith plt.style.context('seaborn-white'):\n    fig, ax = plt.subplots(ncols=1)\n    sns.histplot(x=df['hpi'], y=df['pyrG copies/ul'], hue=df['Treatment'], data=df, ax=ax, linewidth=.9)\n    ax.set(ylabel='Cell Count')\n    ax.ticklabel_format(axis=\"y\", style=\"sci\", scilimits=(0,2))\n\n\n\n\n\n\n\nCode\nplt.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Cody Code",
    "section": "",
    "text": "Midterm Portfolio\n\n\nDPS Analysis\n\n\nAnalysis of Wow dps by class and fight\n\n\n\n\n\n\nMar 25, 2023\n\n\nCody Appa\n\n\n\n\n\n\n  \n\n\n\n\nASSIGNMENT 5\n\n\nHockey Data Visualization\n\n\n\n\nAssignment\n\n\nDataViz\n\n\nTables\n\n\nScatterplot\n\n\nBarplot\n\n\nPiechart\n\n\n\n\nWhy first round draft picks are superior beings\n\n\n\n\n\n\nFeb 27, 2023\n\n\nCody Appa\n\n\n\n\n\n\n  \n\n\n\n\nAssignment 4\n\n\nMarks and Channels\n\n\n\n\nAssignment\n\n\nDataViz\n\n\n\n\na hopefully non atrocious attempt to delve into the importance of marks and channels\n\n\n\n\n\n\nFeb 14, 2023\n\n\nCody Appa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 3\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 2, 2023\n\n\nCody Appa\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJan 30, 2023\n\n\nCody Appa\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Cody Appa is a graduate student at the University of Idaho working on his PhD in Molecular/Micro Biology and Biochemistry. He studies the obligate intra-cellular parasite Chlamydia trachomatis."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\nUniversity of Idaho, Moscow Idaho | Graduate Student in MMBB. 2021-present\nUniversity of Idaho, Moscow Idaho | B.S. in Biological Sciences. 2015-2019"
  },
  {
    "objectID": "posts/MidtermPortfolio/MidtermPortfolio.html#fill-by-fight-type",
    "href": "posts/MidtermPortfolio/MidtermPortfolio.html#fill-by-fight-type",
    "title": "Midterm Portfolio",
    "section": "Fill by fight type",
    "text": "Fill by fight type\nHere really shows the differences in class ranking based off of fight type. It gives a really good idea at who is good at what. Again as you can see hunter is good at everything and mage is a good single target as well as mixed blaster. but if you want specialized AOE or Single target there are lots of options!"
  }
]