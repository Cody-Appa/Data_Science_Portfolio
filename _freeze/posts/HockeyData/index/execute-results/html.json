{
  "hash": "ad5af309775057fe23869dd09601b49d",
  "result": {
    "markdown": "---\ntitle: \"ASSIGNMENT 5\"\nsubtitle: \"Hockey Data Visualization\"\nauthor: \"Cody Appa\"\ndate: \"07/07/2023\"\ncategories: [Assignment, DataViz, Tables, Scatterplot, Barplot, Piechart]\nimage: \"IMG_4466.PNG\"\ncode-fold: true\ncode-tools: true\ndescription: \"Why first round draft picks are superior beings\"\n---\n\n\n## OVERVIEW\n\nIn this assignment, we are going to practice creating visualizations for tabular data. Unlike previous assignments, however, this time we will all be using the same data sets. I'm doing this because I want everyone to engage in the same logic process and have the same design objectives in mind.\n\n\n**Vancouver receives:** The 7th pick in the second round (39th overall), the 10th pick in the second round (42nd overall), and the 10th pick in the third round (74th overall).\n\n**Detroit receives:** The 1st pick in the first round (1st overall).\n\nDoofenschmirtz reasons that more draft picks are better, and is inclined to make the trade. Cassandra isn't so sure...\n\nShe asks you to create some data visualizations she can show to her boss that might help him make the best decision.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.1 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readxl)\n\nNHLDraft<-read.csv(\"NHLDraft.csv\")\nNHLDictionary<-read_excel(\"NHLDictionary.xlsx\")\nglimpse(NHLDraft)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 105,936\nColumns: 12\n$ X           <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…\n$ draftyear   <int> 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001…\n$ name        <chr> \"Drew Fata\", \"Drew Fata\", \"Drew Fata\", \"Drew Fata\", \"Drew …\n$ round       <int> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n$ overall     <int> 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86…\n$ pickinRound <int> 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23…\n$ height      <int> 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73…\n$ weight      <int> 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209…\n$ position    <chr> \"Defense\", \"Defense\", \"Defense\", \"Defense\", \"Defense\", \"De…\n$ playerId    <int> 8469535, 8469535, 8469535, 8469535, 8469535, 8469535, 8469…\n$ postdraft   <int> 0, 1, 2, 4, 5, 10, 11, 12, 13, 3, 6, 7, 8, 9, 14, 15, 16, …\n$ NHLgames    <int> 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n:::\n\n```{.r .cell-code}\nknitr::kable(NHLDictionary)\n```\n\n::: {.cell-output-display}\n|Attribute   |Type         |Description                                                                                                           |\n|:-----------|:------------|:---------------------------------------------------------------------------------------------------------------------|\n|draftyear   |Ordinal      |Calendar year in which the player was drafted into the NHL.                                                           |\n|name        |Item         |Full name of the player.                                                                                              |\n|round       |Ordinal      |Round in which the player was drafted (1 to 7).                                                                       |\n|overall     |Ordinal      |Overall draft position of the player (1 to 224)                                                                       |\n|pickinRound |Ordinal      |Position in which the player was drafted in their round (1 to 32).                                                    |\n|height      |Quantitative |Player height in inches.                                                                                              |\n|weight      |Quantitative |Player weight in pounds.                                                                                              |\n|position    |Categorical  |Player position (Forward, Defense, Goaltender)                                                                        |\n|playerId    |Item         |Unique ID (key) assigned to each player.                                                                              |\n|postdraft   |Ordinal      |Number of seasons since being drafted (0 to 20).                                                                      |\n|NHLgames    |Quantitative |Number of games played in the NHL in that particular season (regular season is 82 games, playoffs are up to 28 more). |\n:::\n:::\n\n\nIn this case, we have a dataframe with all the drafted players since 2000, their position, their draft year and position, and then rows for each season since being drafted (`postdraft`). The key variable here is `NHLgames`, which tells us how many games they played in the NHL each season since being drafted.\n\n## SIMPLE SCATTERPLOT\n\nOne thing to realize about professional hockey is that it is pretty rare for a player to play in the NHL right after being drafted. Players get drafted when they are 18 years old, and they usually play in the juniors, minor leagues, or the NCAA for a bit to further develop. Let's use a scatterplot to visualize this phenomenon with the most recent draft classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraft2022<-NHLDraft%>%\n  filter(draftyear==2022 & postdraft==0)\n\nggplot(draft2022, aes(x=round, y=NHLgames))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndraft2022<-NHLDraft%>%\n  filter(draftyear==2022 & postdraft==0)\n\nggplot(draft2022, aes(x=round, y=NHLgames,))+\n  geom_boxplot(aes(group = round))+\n  labs(title=\"Games Played vs. Draft Round\",x=\"Draft Round\", y = \"Games Played\")+\n  labs(caption = \"As you can see not many players drafted after round one play in their first season utilizing points, lines (bars not visible), and spatial position.\")+\n  theme(plot.caption = element_text(hjust=.5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Changed Visualization\nI decided a boxplot graphic might better help to visualize the trend of flatlining after draft round 1. While I do think it does this, it also doesn't fix the overplotting problem very well in this visualization. Axis labels, title, and caption were added to assist the coach in understanding the chart.\n\n## EXPANDED SCATTERPLOT\n\nThe data from the most recent draft isn't really helpful for our question. Let's go back in time and use a draft year that has had some time to develop and reach their potential. How about 2018?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraft2018<-NHLDraft%>%\n  filter(draftyear==2018 & postdraft<6)\n\nggplot(draft2018, aes(x=round, y=NHLgames))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nHmmm... in addition to the problem of overplotting, we've got an additional issue here. We actually have two keys and one attribute. The attribute is `NHLgames`, and the keys are `round` and `postdraft`, but we are only using round.\n\nPostdraft indicates the number of seasons after being drafted. We have several choices here. We can make a visualization that uses both keys, or we can somehow summarize the data for one of the keys.\n\nFor example, let's say we just wanted to know the TOTAL number of NHL games played since being drafted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrafttot2018<- draft2018%>%\n  group_by(playerId, round, overall, position, name)%>%\n  summarise(totgames=sum(NHLgames))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'playerId', 'round', 'overall', 'position'.\nYou can override using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nggplot(drafttot2018, aes(x=round, y=totgames))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndrafttot2018<- draft2018%>%\n  group_by(playerId, round, overall, position, name)%>%\n  summarise(totgames=sum(NHLgames))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'playerId', 'round', 'overall', 'position'.\nYou can override using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nggplot(drafttot2018, aes(x=round, y=totgames,))+\n  geom_boxplot(aes(group = round))+\n  labs(title=\"Games Played vs. Draft Round\",x=\"Draft Round\", y = \"Games Played\")+\n  labs(caption = \"A visualization demonatrating the distribution of how useful a player is based on which round they are drafted in.\")+\n  theme(plot.caption = element_text(hjust=.5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n## Plot Fix\nFor the expanded scatterplot a boxplot seems to work better. It adds the addition of line length as a channel which (in my opinion), assists in visualizing what is going on with the overplotting. As well as that I think the large box in round one shrinking quickly by round 3 is a heavy indicator that round 1 is the most important by far. Axis labels, title, and caption added to assist.\n\n## SCATTERPLOT WITH OVERALL DRAFT POSITION\n\nThis approach might yield a better match with the scatterplot idiom. What if we ignore draft round, and use the player's overall draft position instead?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(drafttot2018, aes(x=overall, y=totgames))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(drafttot2018, aes(x=overall, y=totgames))+\n  geom_line(color= \"red\")+\n  geom_point()+\n  labs(title=\"Games Played vs. Draft Round\",x=\"Overall Pick\", y = \"Games Played\")+\n  labs(caption = \"The trend of overall NHL draft picks plotted against how many games they played, the lineplot supposedly helps show a downward trend from top draft picks to middle draft picks.\")+\n  theme(plot.caption = element_text(hjust=.5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n## Attempted Fix\nAs the title says it was an attempt, I honestly don't know if it makes the visualization better but I changed the scatterplot to a line plot in order to connect the dots on all of those and show the general trend downwards with a scary red line. However, those outliers seem to make it look less scary than i intended and I couldn't get a standard deviation cloud around the line to work or anything due to not really knowing ggplot.\n\n## SCATTERPLOT SUMMARY\n\nWe seem to be running into an issue in terms of overplotting. Scatterplots are great, but they work best for two quantitative attributes, and we have a situation with one or two keys and one quantitative attribute. The thing is, scatterplots can be very useful when part of our workflow involves modeling the data in some way. We'll cover this kind of thing in future assignments, but just a bit of foreshadowing here:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(drafttot2018, aes(x=round, y=totgames))+\n  geom_point()+\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nAdding the smoothed line doesn't eliminate the overplotting problem, but it does indicate that it exists. We'll cover other potential solutions (including Cody's violin plots!) to this issue later in the course, when we get to the notions of faceting and data reduction.\n\n## SIMPLE BAR CHART\n\nOne of the best ways to deal with overplotting is to use our keys to SEPARATE and ORDER our data. Let's do that now. I'll stick with the summarized data for the 2018 draft year for now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(drafttot2018, aes(x = name, y=totgames))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(drafttot2018, aes(x = round, y=totgames, fill = name))+\n  geom_col()+\n  theme(legend.position = \"none\")+\n  labs(title=\"Games Played vs. Draft Round\",x=\"Draft Round\", y = \"Games Played\")+\n  labs(caption = \"Amount of games played total vs draft round for 2018. Color indicates individual players to help with overplotting\")+\n  theme(plot.caption = element_text(hjust=.5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Pseudo Stacked Bar?\nI basically just changed the bar graph x axis to draft round and then made the player name a channel in the bar graph to show individuals better and assist with overplotting. It's kinda similar to the stacked bar you did but with different channels representing different things. I also got rid of the legend because it made it unreadable with color indicating player name the legend was larger than the graph.\n\n## STACKED BAR?\n\nStacked bar charts use two keys and one value. Can we leverage this idiom? Perhaps if we used both `round` and `postdraft` as our keys and NHLgames as our value...\n\nThe idea here is that we might be able to get a sense of the temporal pattern of NHL games after a player is drafted. Do first round picks join the NHL earlier? Do they stay in the NHL longer? That kind of thing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(draft2018, aes(x = postdraft, y=NHLgames, fill=as.factor(round)))+\n  geom_col(position = \"stack\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nThis seems like it has some potential, but it definitely needs some work (by you):\n\n1.  You know the drill by now. Caption! Labels!\n2.  Improve the color palette.\n3.  Do we really only want data from the 2018 draft class?\n4.  Consider the order of rounds within the stack (glyph). Which round is most important? Change the order within the glyphs to reflect this.\n\n## PIE CHARTS / NORMALIZED BAR CHARTS\n\nWe all know that Pie Charts are rarely a good choice, but let's look at how to make one here. I'll eliminate all the players drafted in 2018 who never played an NHL game, leaving us 80 players drafted in that year who made \"THE SHOW\". Let's look at how those 80 players were drafted:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplayedNHL2018 <- drafttot2018%>%\n  filter(totgames>0)\n\nggplot(playedNHL2018, aes(x = \"\", fill = factor(round))) +\n  geom_bar(width = 1) +\n  coord_polar(theta = \"y\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nObviously this isn't great, but can you state why? Write a little critique of this visualizaiton that:\n\n1.  Considers a player who played hundreds of games over their first five years vs a player who played one game in five years.\n2.  Evaluates the relative value of a second round pick and a third round pick.\n\nNow let's change this to account for the various years post draft:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseasonplayedNHL2018 <- draft2018%>%\n  filter(NHLgames>0)\n\n\nggplot(seasonplayedNHL2018, aes(x = \"\", fill = factor(round))) +\n  geom_bar(width = 1) +\n  coord_polar(theta = \"y\")+\n  facet_wrap(~postdraft)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nSeems like there is something to work with here, but let's compare this to a normalized bar chart:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(draft2018, aes(x = postdraft, y=NHLgames, fill=as.factor(round)))+\n  geom_col(position = \"fill\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 218 rows containing missing values (`geom_col()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nCan you work with this to make it a useful visualization for your friend, Cassandra Canuck?\n\n## HEATMAP?\n\nCould this be useful?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround1<-NHLDraft%>%\n  filter(round==1)\n\nggplot(round1, aes(y = reorder(name, overall), x = postdraft, fill = NHLgames)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"blue\", high = \"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## OTHER STUFF TO CONSIDER\n\n1.  Do these visualizations change as a function of player position?\n2.  Is the number of NHL games played really the best metric to use?\n\n## CONCLUSION\n\nBased on your visualizations, what would you advise regarding this trade proposal? Why?\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}