geom_smooth()+
labs(title = "Top DPS by class per Boss", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())+
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Class, y=DPS, fill = Boss)) +
geom_smooth()+
labs(title = "Top DPS by class per Boss", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())+
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Boss, y=DPS, fill = Class)) +
geom_smooth()+
labs(title = "Top DPS by class per Boss", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())+
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Fight.Type, y=DPS, color = Class)) +
geom_point()+
labs(title = "Top DPS by class per Boss", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())+
scale_color_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Fight.Type, y=Rank, color = Class)) +
geom_point()+
labs(title = "Top DPS by class per Boss", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())+
scale_color_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Fight.Type, y=Rank, fill = Class)) +
geom_col()+
labs(title = "Top DPS by class per Boss", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())+
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Fight.Type, y=Rank, fill = Class)) +
geom_col()+
labs(title = "Top DPS by class per Boss", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())+
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Fight.Type, y=Rank, fill = Class)) +
geom_col()+
labs(title = "Top DPS by class per Boss", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Class, y=Rank, fill = Fight.Type)) +
geom_col()+
labs(title = "Top DPS by class per Boss", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Class, y=Rank, fill = Fight.Type)) +
geom_col()+
labs(title = "Top DPS by class per Boss", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Class, y=Rank, fill = Fight.Type)) +
geom_col()+
labs(title = "Top DPS by class per Boss", caption = "Ranking density per fight type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Fight.Type, y=Rank, fill = Class)) +
geom_col()+
labs(title = "Rankings Per Fight Type", caption = "DPS rankings per boss fight type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Class, y=Rank, fill = Fight.Type)) +
geom_col()+
labs(title = "Which DPS is Best in Each Situation", caption = "Ranking density per fight type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
round1<-NHLDraft%>%
filter(round==1)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readxl)
NHLDraft<-read.csv("NHLDraft.csv")
NHLDictionary<-read_excel("NHLDictionary.xlsx")
glimpse(NHLDraft)
knitr::kable(NHLDictionary)
draft2022<-NHLDraft%>%
filter(draftyear==2022 & postdraft==0)
ggplot(draft2022, aes(x=round, y=NHLgames))+
geom_point()
draft2022<-NHLDraft%>%
filter(draftyear==2022 & postdraft==0)
ggplot(draft2022, aes(x=round, y=NHLgames,))+
geom_boxplot(aes(group = round))+
labs(title="Games Played vs. Draft Round",x="Draft Round", y = "Games Played")+
labs(caption = "As you can see not many players drafted after round one play in their first season utilizing points, lines (bars not visible), and spatial position.")+
theme(plot.caption = element_text(hjust=.5))
draft2018<-NHLDraft%>%
filter(draftyear==2018 & postdraft<6)
ggplot(draft2018, aes(x=round, y=NHLgames))+
geom_point()
drafttot2018<- draft2018%>%
group_by(playerId, round, overall, position, name)%>%
summarise(totgames=sum(NHLgames))
ggplot(drafttot2018, aes(x=round, y=totgames))+
geom_point()
drafttot2018<- draft2018%>%
group_by(playerId, round, overall, position, name)%>%
summarise(totgames=sum(NHLgames))
ggplot(drafttot2018, aes(x=round, y=totgames,))+
geom_boxplot(aes(group = round))+
labs(title="Games Played vs. Draft Round",x="Draft Round", y = "Games Played")+
labs(caption = "A visualization demonatrating the distribution of how useful a player is based on which round they are drafted in.")+
theme(plot.caption = element_text(hjust=.5))
ggplot(drafttot2018, aes(x=overall, y=totgames))+
geom_point()
ggplot(drafttot2018, aes(x=overall, y=totgames))+
geom_line(color= "red")+
geom_point()+
labs(title="Games Played vs. Draft Round",x="Overall Pick", y = "Games Played")+
labs(caption = "The trend of overall NHL draft picks plotted against how many games they played, the lineplot supposedly helps show a downward trend from top draft picks to middle draft picks.")+
theme(plot.caption = element_text(hjust=.5))
ggplot(drafttot2018, aes(x=round, y=totgames))+
geom_point()+
geom_smooth()
ggplot(drafttot2018, aes(x = name, y=totgames))+
geom_col()
ggplot(drafttot2018, aes(x = round, y=totgames, fill = name))+
geom_col()+
theme(legend.position = "none")+
labs(title="Games Played vs. Draft Round",x="Draft Round", y = "Games Played")+
labs(caption = "Amount of games played total vs draft round for 2018. Color indicates individual players to help with overplotting")+
theme(plot.caption = element_text(hjust=.5))
ggplot(NHLDraft, aes(x = overall, y=NHLgames))+
geom_smooth()+
theme(legend.position = "none")+
labs(title="Games Played vs. Draft Round",x="Draft Round", y = "Games Played")+
labs(caption = "Amount of games played for the 2022 draft pool")+
theme(plot.caption = element_text(hjust=.5))
ggplot(NHLDraft, aes(x = postdraft, y=NHLgames, fill=(as.factor(round))))+
geom_col(position = "stack")+
labs(color = "Legend")+
labs(fill = "Draft Round")+
labs(caption = "NHL games years post draft total by round picked")+
theme(plot.caption = element_text(hjust=.5))
ggplot(NHLDraft, aes(x = postdraft, y=NHLgames, fill=(as.factor(round))))+
geom_col(position = "stack")+
labs(color = "Legend")+
labs(fill = "Draft Round")+
labs(caption = "NHL games years post draft total by round picked")+
theme(plot.caption = element_text(hjust=.5))
playedNHL2018 <- drafttot2018%>%
filter(totgames>0)
ggplot(playedNHL2018, aes(x = "", fill = factor(round))) +
geom_bar(width = 1) +
coord_polar(theta = "y")
seasonplayedNHL2018 <- draft2018%>%
filter(NHLgames>0)
ggplot(seasonplayedNHL2018, aes(x = "", fill = factor(round))) +
geom_bar(width = 1) +
coord_polar(theta = "y")+
facet_wrap(~postdraft)
ggplot(draft2018, aes(x = postdraft, y=NHLgames, fill=as.factor(round)))+
geom_col(position = "fill")
round1<-NHLDraft%>%
filter(round==1)
ggplot(NHLDraft, aes(y = NHLgames, x = overall, fill = round))+
geom_tile() +
scale_fill_gradient(low = "blue", high = "red")+
ylim(0,80)+
labs(caption = "NHL games played shows high density of round 1 picks playing many games")+
xlab("Overall Pick")
theme(plot.caption = element_text(hjust=.5))
round1<-NHLDraft%>%
filter(round==1)
ggplot(round1, aes(y = reorder(name, overall), x = postdraft, fill = NHLgames)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red")
ggplot(DPSsheet, aes(x=Class, y=Rank, fill = Fight.Type)) +
geom_col()+
labs(title = "Which DPS is Best in Each Situation", caption = "Ranking density per fight type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readxl)
DPSsheet<-read.csv("DataVizMidterm - Sheet1.csv")
library(scales)
ggplot(DPSsheet, aes(x=Class, y=DPS)) +
geom_point() +
labs(title = "Top DPS by class", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())
ggplot(DPSsheet, aes(x=Class, y=Rank, fill = Fight.Type)) +
geom_col()+
labs(title = "Which DPS is Best in Each Situation", caption = "Ranking density per fight type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggplot(DPSsheet, aes(x=Class, y=Rank, fill = Fight.Type)) +
geom_col()+
labs(title = "Which DPS is Best in Each Situation", caption = "Ranking density per fight type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
round1<-NHLDraft%>%
filter(round==1)
ggplot(NHLDraft, aes(y = NHLgames, x = overall, fill = round))+
geom_tile() +
scale_fill_gradient(low = "blue", high = "red")+
ylim(0,80)+
labs(caption = "NHL games played shows high density of round 1 picks playing many games")+
xlab("Overall Pick")
theme(plot.caption = element_text(hjust=.5))
pivot_longer(cols = -Boss, names_to = "Class", values_to = "DPS")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readxl)
DPSsheet<-read.csv("DataVizMidterm - Sheet1.csv")
pivot_longer(cols = -Boss, names_to = "Class", values_to = "DPS")
data <- read.csv("DataVizMidterm - Sheet1.csv")
pivot_longer(cols = -Boss, names_to = "Class", values_to = "DPS")
data <- read.csv("DataVizMidterm - Sheet1.csv")
pivot_longer(cols = -Eranog, names_to = "Class", values_to = "DPS")
data <- read.csv("DataVizMidterm - Sheet1.csv")
pivot_longer(cols = -Boss, names_to = "Class", values_to = "DPS")
data <- read.csv("DataVizMidterm - Sheet1.csv")
pivot_longer(cols = -"Boss ", names_to = "Class", values_to = "DPS")
data <- read.csv("DataVizMidterm - Sheet1.csv")
pivot_longer(cols = -'Boss ', names_to = "Class", values_to = "DPS")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readxl)
suppressPackageStartupMessages(library(tidyverse))
DPSsheet<-read.csv("DataVizMidterm - Sheet1.csv")
suppressPackageStartupMessages(library(tidyverse))
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readxl)
DPSsheet<-read.csv("DataVizMidterm - Sheet1.csv")
suppressPackageStartupMessages(library(tidyverse))
library(scales)
ggplot(DPSsheet, aes(x=Class, y=DPS)) +
geom_point() +
labs(title = "Top DPS by class", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())
suppressPackageStartupMessages(library(scales))
library(scales)
ggplot(DPSsheet, aes(x=Class, y=DPS)) +
geom_point() +
labs(title = "Top DPS by class", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())
suppressPackageStartupMessages(library(tidyverse))
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readxl)
DPSsheet<-read.csv("DataVizMidterm - Sheet1.csv")
suppressPackageStartupMessages(library(scales))
library(scales)
ggplot(DPSsheet, aes(x=Class, y=DPS)) +
geom_point() +
labs(title = "Top DPS by class", caption = "Overall dps for the top 10 of every boss in the raid") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())
ggplot(DPSsheet, aes(x=Fight.Type, y=Appearance, fill = Class)) +
geom_col()+
labs(title = "Rankings Per Fight Type", caption = "DPS rankings per boss fight type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Fight.Type, y=DPS, color = Class)) +
geom_point()+
labs(title = "Top DPS by class per Fight Type", caption = "Which classes are best based on the encounter type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())+
scale_color_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Fight.Type, y=DPS, color = Class)) +
geom_point()+
labs(title = "Top DPS by class per Fight Type", caption = "Which classes are best based on the encounter type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scientific_format())+
scale_color_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Class, y=Rank, fill = Fight.Type)) +
geom_col()+
labs(title = "Which DPS is Best in Each Situation", caption = "Ranking density per fight type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(DPSsheet, aes(x=Fight.Type, y=Rank, fill = Class)) +
geom_col()+
labs(title = "Rankings Per Fight Type", caption = "DPS rankings per boss fight type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("red", "#B01AAB", "orange", "#219864", "green", "#51CDCD", "#51CD92", "grey", "yellow", "blue", "purple", "brown"), drop = FALSE)
ggplot(DPSsheet, aes(x=Class, y=Appearance, fill = Fight.Type)) +
geom_col()+
labs(title = "Which DPS is Best in Each Situation", caption = "Ranking density per fight type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(DPSsheet, aes(x=Class, y=Rank, fill = Fight.Type)) +
geom_col()+
labs(title = "Which DPS is Best in Each Situation", caption = "Ranking density per fight type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(DPSsheet, aes(x=Class, y=Appearance, fill = Fight.Type)) +
geom_col()+
labs(title = "Which DPS is Best in Each Situation", caption = "Ranking density per fight type") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(DPSsheet, aes(x=Class, y=Appearance, fill = Fight.Type)) +
geom_col()+
labs(title = "Which DPS is Best in Each Situation", caption = "Times each class appears in the top 10 ranking per fight type", x="Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(DPSsheet, aes(x=Class, y=Appearance, fill = Fight.Type)) +
geom_col()+
labs(title = "Which DPS is Best in Each Situation", caption = "Times each class appears in the top 10 ranking per fight type", y="Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(DPSsheet_AOE, aes(x=Class, y=AOE)) +
geom_col(fill = "blue") +
labs(title = "Which DPS is Best in AOE Situations",
caption = "Times each class appears in the top 10 ranking in AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- DPSsheet[, c("Class", "AOE")]
DPSsheet_AOE <- DPSsheet[, c("Class", "AOE")]
ggplot(DPSsheet, aes(x=Class, y=Appearance, fill = Fight.Type))+
geom_col(fill = "blue") +
labs(title = "Which DPS is Best in AOE Situations",
caption = "Times each class appears in the top 10 ranking in AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(DPSsheet, aes(x=Class, y=Appearance, fill = Fight.Type))+
labs(title = "Which DPS is Best in AOE Situations",
caption = "Times each class appears in the top 10 ranking in AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(DPSsheet, aes(x=Class, y=Appearance, fill = Fight.Type))+
geom_col() +
labs(title = "Which DPS is Best in AOE Situations",
caption = "Times each class appears in the top 10 ranking in AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(DPSsheet, aes(x = Class, y = AOE, fill = Class))+
geom_col() +
labs(title = "Which DPS is Best in AOE Situations",
caption = "Times each class appears in the top 10 ranking in AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- DPSsheet[, c("Class", "AOE")]
colnames(DPSsheet)
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "AOE")
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col() +
labs(title = "Which DPS is Best in AOE Situations",
caption = "Times each class appears in the top 10 ranking in AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "Single Target")
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col() +
labs(title = "Which DPS is Best in AOE Situations",
caption = "Times each class appears in the top 10 ranking in AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "Single Target")
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col() +
labs(title = "Which DPS is Best in Single Target Situations",
caption = "Times each class appears in the top 10 ranking in Single Target fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "Single Target")
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col(fill = "blue") +
labs(title = "Which DPS is Best in Single Target Situations",
caption = "Times each class appears in the top 10 ranking in Single Target fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "Mixed")
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col() +
labs(title = "Which DPS is Best in Mixed Situations",
caption = "Times each class appears in the top 10 ranking in mixed single target and AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "Mixed")
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col(fill = "green") +
labs(title = "Which DPS is Best in Mixed Situations",
caption = "Times each class appears in the top 10 ranking in mixed single target and AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "AOE" & Appearance != 0)
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col() +
labs(title = "Which DPS is Best in AOE Situations",
caption = "Times each class appears in the top 10 ranking in AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "AOE")
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col() +
labs(title = "Which DPS is Best in AOE Situations",
caption = "Times each class appears in the top 10 ranking in AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "AOE")
DPSsheet_AOE$Class <- droplevels(DPSsheet_AOE$Class)
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "AOE")
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col() +
labs(title = "Which DPS is Best in AOE Situations",
caption = "Times each class appears in the top 10 ranking in AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "Mixed")
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col(fill = "#54D16C") +
labs(title = "Which DPS is Best in Mixed Situations",
caption = "Times each class appears in the top 10 ranking in mixed single target and AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "Single Target")
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col(fill = "#709BE1") +
labs(title = "Which DPS is Best in Single Target Situations",
caption = "Times each class appears in the top 10 ranking in Single Target fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(DPSsheet, aes(x=Class, y=Appearance, fill = Fight.Type)) +
geom_col()+
labs(title = "Which DPS is Best in Each Situation", caption = "Times each class appears in the top 10 ranking per fight type", y="Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "AOE")
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col() +
labs(title = "Which DPS is Best in AOE Situations",
caption = "Times each class appears in the top 10 ranking in AOE fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "Single Target")
ggplot(DPSsheet_AOE, aes(x = reorder(Class, -Appearance), y = Appearance, fill = Fight.Type)) +
geom_col(fill = "#709BE1") +
labs(title = "Which DPS is Best in Single Target Situations",
caption = "Times each class appears in the top 10 ranking in Single Target fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "Single Target")
ggplot(DPSsheet_AOE, aes(x = reorder(Class, -Appearance), y = Appearance, fill = Fight.Type)) +
geom_col(fill = "#709BE1") +
labs(title = "Which DPS is Best in Single Target Situations",
caption = "Times each class appears in the top 10 ranking in Single Target fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "Single Target")
DPSsheet_AOE <- DPSsheet_AOE %>%
arrange(desc(Appearance))
ggplot(DPSsheet_AOE, aes(x = reorder(Class, -Appearance), y = Appearance, fill = Fight.Type)) +
geom_col(fill = "#709BE1") +
labs(title = "Which DPS is Best in Single Target Situations",
caption = "Times each class appears in the top 10 ranking in Single Target fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DPSsheet_AOE <- subset(DPSsheet, Fight.Type == "Single Target")
ggplot(DPSsheet_AOE, aes(x = Class, y = Appearance, fill = Fight.Type)) +
geom_col(fill = "#709BE1") +
labs(title = "Which DPS is Best in Single Target Situations",
caption = "Times each class appears in the top 10 ranking in Single Target fights",
y = "Number of Times in Top 10") +
theme(plot.caption = element_text(hjust = .5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
